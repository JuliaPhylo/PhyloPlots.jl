{
    "docs": [
        {
            "location": "/", 
            "text": "PhyloPlots.jl\n\n\nPhyloPlots\n is a \nJulia\n package to plot phylogenetic trees and networks.\n\n\nPhyloNetworks\n objects can be displayed via \nGadfly\n, and through \nR\n via \nRCall\n.\n\n\n\n\npublic documentation\n\n\ninternal documentation\n\n\n\n\n\n\nfunctions\n\n\n\n\nPhyloPlots.plot\n\n\nPhyloPlots.plot\n\n\nRCall.sexp\n\n\nPhyloPlots.checkNodeDataFrame\n\n\nPhyloPlots.getEdgeNodeCoordinates\n\n\nPhyloPlots.prepareEdgeDataFrame\n\n\nPhyloPlots.prepareNodeDataFrame\n\n\nPhyloPlots.rexport", 
            "title": "home"
        }, 
        {
            "location": "/#phyloplotsjl", 
            "text": "PhyloPlots  is a  Julia  package to plot phylogenetic trees and networks.  PhyloNetworks  objects can be displayed via  Gadfly , and through  R  via  RCall .   public documentation  internal documentation", 
            "title": "PhyloPlots.jl"
        }, 
        {
            "location": "/#functions", 
            "text": "PhyloPlots.plot  PhyloPlots.plot  RCall.sexp  PhyloPlots.checkNodeDataFrame  PhyloPlots.getEdgeNodeCoordinates  PhyloPlots.prepareEdgeDataFrame  PhyloPlots.prepareNodeDataFrame  PhyloPlots.rexport", 
            "title": "functions"
        }, 
        {
            "location": "/lib/public/", 
            "text": "public documentation\n\n\nDocumentation for \nPhyloPlots\n's public (exported) functions.\n\n\n\n\nindex\n\n\n\n\nPhyloPlots.plot\n\n\nPhyloPlots.plot\n\n\nRCall.sexp\n\n\n\n\n\n\n\n\n\nfunctions\n\n\n#\n\n\nPhyloPlots.plot\n \n \nMethod\n.\n\n\nplot(net::HybridNetwork, method::Symbol)\n\n\n\n\n\nPlot a network using R graphics. \nmethod\n should be \n:RCall\n (actually, for now any symbol would do!).\n\n\noptional arguments, shared with the Gadfly-based plot function:\n\n\n\n\nuseEdgeLength: if true, the tree edges and major hybrid edges are drawn proportionally to their length. Minor hybrid edges are not, however. Note that edge lengths in coalescent units may scale very poorly with time.\n\n\nshowTipLabel: if true, taxon labels are shown. You may need to zoom out to see them.\n\n\nshowNodeNumber: if true, nodes are labelled with the number used internally.\n\n\nshowEdgeLength: if true, edges are labelled with their length (above)\n\n\nshowGamma: if true, hybrid edges are labelled with their heritability (below)\n\n\nedgeColor: color for tree edges. black by default.\n\n\nmajorHybridEdgeColor: color for major hybrid edges\n\n\nminorHybridEdgeColor: color for minor hybrid edges\n\n\nshowEdgeNumber: if true, edges are labelled with the number used internally.\n\n\nshowIntNodeLabel: if true, internal nodes are labelled with their names. Useful for hybrid nodes, which do have tags like '#H1'.\n\n\nedgeLabel: dataframe with two columns: the first with edge numbers, the second with labels (like bootstrap values) to annotate edges. empty by default.\n\n\nnodeLabel: dataframe with two columns: the first with node numbers, the second with labels (like bootstrap values for hybrid relationships) to annotate nodes. empty by default.\n\n\n\n\noptional arguments specific to this function:\n\n\n\n\nxlim, ylim: array of 2 values\n\n\ntipOffset: to offset tip labels\n\n\n\n\nNote that \nplot\n actually modifies some (minor) attributes of the network, as it calls \ndirectEdges!\n, \npreorder!\n and \ncladewiseorder!\n.\n\n\nIf hybrid edges cross tree and major edges, you may choose to rotate some tree edges to eliminate crossing edges, using \nrotate!\n (in \nPhyloNetworks\n).\n\n\nAlternative\n: a tree or network can be exported with \nsexp\n and then displayed with R's \"plot\" and all its options.\n\n\nsource\n\n\n#\n\n\nPhyloPlots.plot\n \n \nMethod\n.\n\n\nplot(model::TwoBinaryTraitSubstitutionModel)\n\n\n\n\n\nDisplay substitution rates for a trait evolution model for two possibly dependent binary traits; using \nR\n via \nRCall\n. Adapted from fitPagel functions found in the \nR\n package \nphytools\n.\n\n\nExamples\n\n\njulia\n using PhyloNetworks\n\njulia\n m = TwoBinaryTraitSubstitutionModel([2.0,1.2,1.1,2.2,1.0,3.1,2.0,1.1],\n                [\ncarnivory\n, \nnoncarnivory\n, \nwet\n, \ndry\n])\nSubstitution model for 2 binary traits, with rate matrix:\n                     carnivory-wet    carnivory-dry noncarnivory-wet noncarnivory-dry\n    carnivory-wet                *           1.0000           2.0000           0.0000\n    carnivory-dry           3.1000                *           0.0000           1.1000\n noncarnivory-wet           1.2000           0.0000                *           2.0000\n noncarnivory-dry           0.0000           2.2000           1.1000                *\n\njulia\n plot(m);\n\n\n\n\n\nsource\n\n\n#\n\n\nRCall.sexp\n \n \nMethod\n.\n\n\nfunction\n \nsexp\n(\nnet\n::\nHybridNetwork\n)\n\n\n\n\n\n\nExport a HybridNework object to the R language as either \nphylo\n or \nevonet\n object (depending on degree of hybridization) recognized by the R package \nape\n. Used by the \n$object\n syntax and by \n@rput\n to use a Julia object in R: see the examples below. Makes it easy to plot a Julia tree or network using plotting facilities in R.\n\n\ncode inspired from \nPhylo.jl\n\n\nExamples\n\n\njulia\n \nusing\n \nRCall\n\n\njulia\n \nusing\n \nPhyloNetworks\n\n\njulia\n \nnet\n \n=\n \nreadTopology\n(\n(((A:.2,(B:.1)#H1:.1::0.9):.1,(C:.11,#H1:.01::0.1):.19):.1,D:.4);\n);\n\n\nR\n \nlibrary\n(\nape\n);\n \n#\n \ntype\n \n$\n \nto\n \nswitch\n \nfrom\n \njulia\n \nto\n \nR\n\n\nR\n \n$\nnet\n\n\n\nEvolutionary\n \nnetwork\n \nwith\n \n1\n \nreticulation\n\n\n               \n---\n \nBase\n \ntree\n \n---\n\n\nPhylogenetic\n \ntree\n \nwith\n \n4\n \ntips\n \nand\n \n5\n \ninternal\n \nnodes\n.\n\n\n\nTip\n \nlabels\n:\n\n\n[\n1\n]\n \nA\n \nB\n \nC\n \nD\n\n\n\nRooted\n;\n \nincludes\n \nbranch\n \nlengths\n.\n\n\njulia\n \n@\nrput\n \nnet\n \n#\n \npress\n \nthe\n \ndelete\n \nkey\n \nto\n \nswitch\n \nfrom\n \nR\n \nback\n \nto\n \njulia\n\n\nR\n \nnet\n\n\n\nEvolutionary\n \nnetwork\n \nwith\n \n1\n \nreticulation\n\n\n\n---\n \nBase\n \ntree\n \n---\n\n\nPhylogenetic\n \ntree\n \nwith\n \n4\n \ntips\n \nand\n \n5\n \ninternal\n \nnodes\n.\n\n\n\nTip\n \nlabels\n:\n\n\n[\n1\n]\n \nA\n \nB\n \nC\n \nD\n\n\n\nRooted\n;\n \nincludes\n \nbranch\n \nlengths\n.\n\n\n\nR\n \nstr\n(\nnet\n)\n\n\nList\n \nof\n \n7\n\n \n$\n \nedge\n               \n:\n \nint\n \n[\n1\n:\n8\n,\n \n1\n:\n2\n]\n \n5\n \n5\n \n6\n \n6\n \n7\n \n8\n \n8\n \n9\n \n6\n \n4\n \n...\n\n \n$\n \nreticulation\n.\nlength\n:\n \nnum\n \n0\n.\n01\n\n \n$\n \nNnode\n              \n:\n \nint\n \n5\n\n \n$\n \nedge\n.\nlength\n        \n:\n \nnum\n \n[\n1\n:\n8\n]\n \n0\n.\n1\n \n0\n.\n4\n \n0\n.\n1\n \n0\n.\n19\n \n0\n.\n11\n \n0\n.\n2\n \n0\n.\n1\n \n0\n.\n1\n\n \n$\n \nreticulation\n       \n:\n \nint\n \n[\n1\n,\n \n1\n:\n2\n]\n \n7\n \n9\n\n \n$\n \nreticulation\n.\ngamma\n \n:\n \nnum\n \n0\n.\n1\n\n \n$\n \ntip\n.\nlabel\n          \n:\n \nchr\n \n[\n1\n:\n4\n]\n \nA\n \nB\n \nC\n \nD\n\n \n-\n \nattr\n(*,\n \nclass\n)=\n \nchr\n \n[\n1\n:\n2\n]\n \nevonet\n \nphylo\n\n\nNULL\n\n\n\nR\n \nplot\n(\nnet\n)\n\n\n\n\n\n\nsource", 
            "title": "public"
        }, 
        {
            "location": "/lib/public/#public-documentation", 
            "text": "Documentation for  PhyloPlots 's public (exported) functions.", 
            "title": "public documentation"
        }, 
        {
            "location": "/lib/public/#index", 
            "text": "PhyloPlots.plot  PhyloPlots.plot  RCall.sexp", 
            "title": "index"
        }, 
        {
            "location": "/lib/public/#functions", 
            "text": "#  PhyloPlots.plot     Method .  plot(net::HybridNetwork, method::Symbol)  Plot a network using R graphics.  method  should be  :RCall  (actually, for now any symbol would do!).  optional arguments, shared with the Gadfly-based plot function:   useEdgeLength: if true, the tree edges and major hybrid edges are drawn proportionally to their length. Minor hybrid edges are not, however. Note that edge lengths in coalescent units may scale very poorly with time.  showTipLabel: if true, taxon labels are shown. You may need to zoom out to see them.  showNodeNumber: if true, nodes are labelled with the number used internally.  showEdgeLength: if true, edges are labelled with their length (above)  showGamma: if true, hybrid edges are labelled with their heritability (below)  edgeColor: color for tree edges. black by default.  majorHybridEdgeColor: color for major hybrid edges  minorHybridEdgeColor: color for minor hybrid edges  showEdgeNumber: if true, edges are labelled with the number used internally.  showIntNodeLabel: if true, internal nodes are labelled with their names. Useful for hybrid nodes, which do have tags like '#H1'.  edgeLabel: dataframe with two columns: the first with edge numbers, the second with labels (like bootstrap values) to annotate edges. empty by default.  nodeLabel: dataframe with two columns: the first with node numbers, the second with labels (like bootstrap values for hybrid relationships) to annotate nodes. empty by default.   optional arguments specific to this function:   xlim, ylim: array of 2 values  tipOffset: to offset tip labels   Note that  plot  actually modifies some (minor) attributes of the network, as it calls  directEdges! ,  preorder!  and  cladewiseorder! .  If hybrid edges cross tree and major edges, you may choose to rotate some tree edges to eliminate crossing edges, using  rotate!  (in  PhyloNetworks ).  Alternative : a tree or network can be exported with  sexp  and then displayed with R's \"plot\" and all its options.  source  #  PhyloPlots.plot     Method .  plot(model::TwoBinaryTraitSubstitutionModel)  Display substitution rates for a trait evolution model for two possibly dependent binary traits; using  R  via  RCall . Adapted from fitPagel functions found in the  R  package  phytools .  Examples  julia  using PhyloNetworks\n\njulia  m = TwoBinaryTraitSubstitutionModel([2.0,1.2,1.1,2.2,1.0,3.1,2.0,1.1],\n                [ carnivory ,  noncarnivory ,  wet ,  dry ])\nSubstitution model for 2 binary traits, with rate matrix:\n                     carnivory-wet    carnivory-dry noncarnivory-wet noncarnivory-dry\n    carnivory-wet                *           1.0000           2.0000           0.0000\n    carnivory-dry           3.1000                *           0.0000           1.1000\n noncarnivory-wet           1.2000           0.0000                *           2.0000\n noncarnivory-dry           0.0000           2.2000           1.1000                *\n\njulia  plot(m);  source  #  RCall.sexp     Method .  function   sexp ( net :: HybridNetwork )   Export a HybridNework object to the R language as either  phylo  or  evonet  object (depending on degree of hybridization) recognized by the R package  ape . Used by the  $object  syntax and by  @rput  to use a Julia object in R: see the examples below. Makes it easy to plot a Julia tree or network using plotting facilities in R.  code inspired from  Phylo.jl  Examples  julia   using   RCall  julia   using   PhyloNetworks  julia   net   =   readTopology ( (((A:.2,(B:.1)#H1:.1::0.9):.1,(C:.11,#H1:.01::0.1):.19):.1,D:.4); );  R   library ( ape );   #   type   $   to   switch   from   julia   to   R  R   $ net  Evolutionary   network   with   1   reticulation \n\n                ---   Base   tree   ---  Phylogenetic   tree   with   4   tips   and   5   internal   nodes .  Tip   labels :  [ 1 ]   A   B   C   D  Rooted ;   includes   branch   lengths .  julia   @ rput   net   #   press   the   delete   key   to   switch   from   R   back   to   julia  R   net  Evolutionary   network   with   1   reticulation  ---   Base   tree   ---  Phylogenetic   tree   with   4   tips   and   5   internal   nodes .  Tip   labels :  [ 1 ]   A   B   C   D  Rooted ;   includes   branch   lengths .  R   str ( net )  List   of   7 \n  $   edge                 :   int   [ 1 : 8 ,   1 : 2 ]   5   5   6   6   7   8   8   9   6   4   ... \n  $   reticulation . length :   num   0 . 01 \n  $   Nnode                :   int   5 \n  $   edge . length          :   num   [ 1 : 8 ]   0 . 1   0 . 4   0 . 1   0 . 19   0 . 11   0 . 2   0 . 1   0 . 1 \n  $   reticulation         :   int   [ 1 ,   1 : 2 ]   7   9 \n  $   reticulation . gamma   :   num   0 . 1 \n  $   tip . label            :   chr   [ 1 : 4 ]   A   B   C   D \n  -   attr (*,   class )=   chr   [ 1 : 2 ]   evonet   phylo  NULL  R   plot ( net )   source", 
            "title": "functions"
        }, 
        {
            "location": "/lib/internals/", 
            "text": "internal documentation\n\n\nDocumentation for \nPhyloPlots\n's internal functions. Those functions are not exported, but can still be used (like: \nPhyloPlots.foo()\n for a function named \nfoo()\n).\n\n\n\n\n\n\n\nindex\n\n\n\n\nPhyloPlots.checkNodeDataFrame\n\n\nPhyloPlots.getEdgeNodeCoordinates\n\n\nPhyloPlots.prepareEdgeDataFrame\n\n\nPhyloPlots.prepareNodeDataFrame\n\n\nPhyloPlots.rexport\n\n\n\n\n\n\n\n\n\nfunctions\n\n\n#\n\n\nPhyloPlots.checkNodeDataFrame\n \n \nMethod\n.\n\n\ncheckNodeDataFrame(net, nodeLabel)\n\n\n\n\n\nCheck data frame for node annotations:\n\n\n\n\ncheck that the data has at least 2 columns (if it has any)\n\n\ncheck that the first column has integers (to serve as node numbers)\n\n\nremove rows with no node numbers\n\n\nwarning if some node numbers in the data are not in the network.\n\n\n\n\nsource\n\n\n#\n\n\nPhyloPlots.getEdgeNodeCoordinates\n \n \nMethod\n.\n\n\ngetEdgeNodeCoordinates(net, useEdgeLength)\n\n\n\n\n\nCalculate coordinates for plotting later with Gadfly or RCall.\n\n\nActually modifies some (minor) attributes of the network, as it calls \ndirectEdges!\n, \npreorder!\n and \ncladewiseorder!\n.\n\n\nsource\n\n\n#\n\n\nPhyloPlots.prepareEdgeDataFrame\n \n \nMethod\n.\n\n\nprepareEdgeDataFrame(net, edgeLabel::DataFrame, mainTree::Bool,\n    edge_xB, edge_xE, edge_yB, edge_yE)\n\n\n\n\n\nCheck data frame for edge annotation. \nedge_*\n: Float64 vectors giving the coordinates for the beginning and end of edges. Return data frame with columns\n\n\n\n\nx, y: coordinates on the plots\n\n\nlen: node name\n\n\ngam: gamma (inheritance value)\n\n\nnum: node number\n\n\nlab: node label\n\n\nhyb: is hybrid?\n\n\nmin: is minor?\n\n\n\n\nsource\n\n\n#\n\n\nPhyloPlots.prepareNodeDataFrame\n \n \nMethod\n.\n\n\nprepareNodeDataFrame(net, nodeLabel::DataFrame,\n    showNodeNumber::Bool, showIntNodeLabel::Bool, labelnodes::Bool,\n    node_x, node_y)\n\n\n\n\n\nMake data frame for node annotation. \nnode_*\n should be Float64 vectors. \nnodeLabel\n should have columns as required by \ncheckNodeDataFrame\n\n\nColumns of output data frame:\n\n\n\n\nx, y: coordinates on the plots (from \nnode_*\n)\n\n\nname: node name\n\n\nnum: node number\n\n\nlab: node label\n\n\nlea: is leaf?\n\n\n\n\nsource\n\n\n#\n\n\nPhyloPlots.rexport\n \n \nMethod\n.\n\n\nrexport\n(\nnet\n::\nHybridNetwork\n;\n \nmainTree\n=\nfalse\n,\n \nuseEdgeLength\n=\ntrue\n)\n\n\n\n\n\n\nCreate an RObject of class \nphylo\n (and \nevonet\n depending on the number of hybridizations) recognized by the \nape\n library in R (S3 object). This RObject can be evaluated using the tools available in the \nape\n library in R. For example, we can visualize the network using \nape\n's \nplot\n function.\n\n\nnot exported: \nsexp\n is the best way to go.\n\n\nArguments\n\n\n\n\nuseEdgeLength: if true, export edge lengths from \nnet\n.\n\n\nmainTree: if true, minor hybrid edges are omitted.\n\n\n\n\nExamples\n\n\njulia\n \nnet\n \n=\n \nreadTopology\n(\n(((A,(B)#H1:::0.9),(C,#H1:::0.1)),D);\n);\n\n\njulia\n \nphy\n \n=\n \nrexport\n(\nnet\n)\n\n\nRCall\n.\nRObject\n{\nRCall.VecSxp\n}\n\n\n$\nNnode\n\n\n[\n1\n]\n \n5\n\n\n\n$\nedge\n\n     \n[\n,\n1\n]\n \n[\n,\n2\n]\n\n\n[\n1\n,\n]\n    \n5\n    \n6\n\n\n[\n2\n,\n]\n    \n5\n    \n4\n\n\n[\n3\n,\n]\n    \n6\n    \n8\n\n\n[\n4\n,\n]\n    \n6\n    \n7\n\n\n[\n5\n,\n]\n    \n7\n    \n3\n\n\n[\n6\n,\n]\n    \n8\n    \n1\n\n\n[\n7\n,\n]\n    \n8\n    \n9\n\n\n[\n8\n,\n]\n    \n9\n    \n2\n\n\n\n$\ntip\n.\nlabel\n\n\n[\n1\n]\n \nA\n \nB\n \nC\n \nD\n\n\n\n$\nreticulation\n\n     \n[\n,\n1\n]\n \n[\n,\n2\n]\n\n\n[\n1\n,\n]\n    \n7\n    \n9\n\n\n\n$\nreticulation\n.\ngamma\n\n\n[\n1\n]\n \n0\n.\n1\n\n\n\nattr\n(,\nclass\n)\n\n\n[\n1\n]\n \nevonet\n \nphylo\n\n\n\njulia\n \nusing\n \nRCall\n\n\n\njulia\n \nR\nlibrary(ape)\n;\n\n\n\njulia\n \nphy\n\n\nRCall\n.\nRObject\n{\nRCall.VecSxp\n}\n\n\n    \nEvolutionary\n \nnetwork\n \nwith\n \n1\n \nreticulation\n\n\n               \n---\n \nBase\n \ntree\n \n---\n\n\nPhylogenetic\n \ntree\n \nwith\n \n4\n \ntips\n \nand\n \n5\n \ninternal\n \nnodes\n.\n\n\n\nTip\n \nlabels\n:\n\n\n[\n1\n]\n \nA\n \nB\n \nC\n \nD\n\n\n\nRooted\n;\n \nno\n \nbranch\n \nlengths\n.\n\n\n\nR\n \nphy\n\n\n\nEvolutionary\n \nnetwork\n \nwith\n \n1\n \nreticulation\n\n\n               \n---\n \nBase\n \ntree\n \n---\n\n\nPhylogenetic\n \ntree\n \nwith\n \n4\n \ntips\n \nand\n \n5\n \ninternal\n \nnodes\n.\n\n\n\nTip\n \nlabels\n:\n\n\n[\n1\n]\n \nA\n \nB\n \nC\n \nD\n\n\n\nRooted\n;\n \nno\n \nbranch\n \nlengths\n.\n\n\n\nR\n \nstr\n(\nphy\n)\n\n\nList\n \nof\n \n5\n\n\n$\n \nNnode\n             \n:\n \nint\n \n5\n\n\n$\n \nedge\n              \n:\n \nint\n \n[\n1\n:\n8\n,\n \n1\n:\n2\n]\n \n5\n \n5\n \n6\n \n6\n \n7\n \n8\n \n8\n \n9\n \n6\n \n4\n \n...\n\n\n$\n \ntip\n.\nlabel\n         \n:\n \nchr\n \n[\n1\n:\n4\n]\n \nA\n \nB\n \nC\n \nD\n\n\n$\n \nreticulation\n      \n:\n \nint\n \n[\n1\n,\n \n1\n:\n2\n]\n \n7\n \n9\n\n\n$\n \nreticulation\n.\ngamma\n:\n \nnum\n \n0\n.\n1\n\n\n-\n \nattr\n(*,\n \nclass\n)=\n \nchr\n \n[\n1\n:\n2\n]\n \nevonet\n \nphylo\n\n\n\n\n\n\nsource", 
            "title": "internals"
        }, 
        {
            "location": "/lib/internals/#internal-documentation", 
            "text": "Documentation for  PhyloPlots 's internal functions. Those functions are not exported, but can still be used (like:  PhyloPlots.foo()  for a function named  foo() ).", 
            "title": "internal documentation"
        }, 
        {
            "location": "/lib/internals/#index", 
            "text": "PhyloPlots.checkNodeDataFrame  PhyloPlots.getEdgeNodeCoordinates  PhyloPlots.prepareEdgeDataFrame  PhyloPlots.prepareNodeDataFrame  PhyloPlots.rexport", 
            "title": "index"
        }, 
        {
            "location": "/lib/internals/#functions", 
            "text": "#  PhyloPlots.checkNodeDataFrame     Method .  checkNodeDataFrame(net, nodeLabel)  Check data frame for node annotations:   check that the data has at least 2 columns (if it has any)  check that the first column has integers (to serve as node numbers)  remove rows with no node numbers  warning if some node numbers in the data are not in the network.   source  #  PhyloPlots.getEdgeNodeCoordinates     Method .  getEdgeNodeCoordinates(net, useEdgeLength)  Calculate coordinates for plotting later with Gadfly or RCall.  Actually modifies some (minor) attributes of the network, as it calls  directEdges! ,  preorder!  and  cladewiseorder! .  source  #  PhyloPlots.prepareEdgeDataFrame     Method .  prepareEdgeDataFrame(net, edgeLabel::DataFrame, mainTree::Bool,\n    edge_xB, edge_xE, edge_yB, edge_yE)  Check data frame for edge annotation.  edge_* : Float64 vectors giving the coordinates for the beginning and end of edges. Return data frame with columns   x, y: coordinates on the plots  len: node name  gam: gamma (inheritance value)  num: node number  lab: node label  hyb: is hybrid?  min: is minor?   source  #  PhyloPlots.prepareNodeDataFrame     Method .  prepareNodeDataFrame(net, nodeLabel::DataFrame,\n    showNodeNumber::Bool, showIntNodeLabel::Bool, labelnodes::Bool,\n    node_x, node_y)  Make data frame for node annotation.  node_*  should be Float64 vectors.  nodeLabel  should have columns as required by  checkNodeDataFrame  Columns of output data frame:   x, y: coordinates on the plots (from  node_* )  name: node name  num: node number  lab: node label  lea: is leaf?   source  #  PhyloPlots.rexport     Method .  rexport ( net :: HybridNetwork ;   mainTree = false ,   useEdgeLength = true )   Create an RObject of class  phylo  (and  evonet  depending on the number of hybridizations) recognized by the  ape  library in R (S3 object). This RObject can be evaluated using the tools available in the  ape  library in R. For example, we can visualize the network using  ape 's  plot  function.  not exported:  sexp  is the best way to go.  Arguments   useEdgeLength: if true, export edge lengths from  net .  mainTree: if true, minor hybrid edges are omitted.   Examples  julia   net   =   readTopology ( (((A,(B)#H1:::0.9),(C,#H1:::0.1)),D); );  julia   phy   =   rexport ( net )  RCall . RObject { RCall.VecSxp }  $ Nnode  [ 1 ]   5  $ edge \n      [ , 1 ]   [ , 2 ]  [ 1 , ]      5      6  [ 2 , ]      5      4  [ 3 , ]      6      8  [ 4 , ]      6      7  [ 5 , ]      7      3  [ 6 , ]      8      1  [ 7 , ]      8      9  [ 8 , ]      9      2  $ tip . label  [ 1 ]   A   B   C   D  $ reticulation \n      [ , 1 ]   [ , 2 ]  [ 1 , ]      7      9  $ reticulation . gamma  [ 1 ]   0 . 1  attr (, class )  [ 1 ]   evonet   phylo  julia   using   RCall  julia   R library(ape) ;  julia   phy  RCall . RObject { RCall.VecSxp } \n\n     Evolutionary   network   with   1   reticulation \n\n                ---   Base   tree   ---  Phylogenetic   tree   with   4   tips   and   5   internal   nodes .  Tip   labels :  [ 1 ]   A   B   C   D  Rooted ;   no   branch   lengths .  R   phy  Evolutionary   network   with   1   reticulation \n\n                ---   Base   tree   ---  Phylogenetic   tree   with   4   tips   and   5   internal   nodes .  Tip   labels :  [ 1 ]   A   B   C   D  Rooted ;   no   branch   lengths .  R   str ( phy )  List   of   5  $   Nnode               :   int   5  $   edge                :   int   [ 1 : 8 ,   1 : 2 ]   5   5   6   6   7   8   8   9   6   4   ...  $   tip . label           :   chr   [ 1 : 4 ]   A   B   C   D  $   reticulation        :   int   [ 1 ,   1 : 2 ]   7   9  $   reticulation . gamma :   num   0 . 1  -   attr (*,   class )=   chr   [ 1 : 2 ]   evonet   phylo   source", 
            "title": "functions"
        }
    ]
}