var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#internal-documentation","page":"internals","title":"internal documentation","text":"","category":"section"},{"location":"lib/internals/","page":"internals","title":"internals","text":"Documentation for PhyloPlots's internal functions. Those functions are not exported, but can still be used (like: PhyloPlots.foo() for a function named foo()).","category":"page"},{"location":"lib/internals/#index","page":"internals","title":"index","text":"","category":"section"},{"location":"lib/internals/","page":"internals","title":"internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#functions","page":"internals","title":"functions","text":"","category":"section"},{"location":"lib/internals/","page":"internals","title":"internals","text":"Modules = [PhyloPlots]\nPublic = false\nOrder   = [:function]","category":"page"},{"location":"lib/internals/#PhyloPlots.checkNodeDataFrame-Tuple{HybridNetwork, DataFrames.DataFrame}","page":"internals","title":"PhyloPlots.checkNodeDataFrame","text":"checkNodeDataFrame(net, nodeLabel)\n\nCheck data frame for node annotations:\n\ncheck that the data has at least 2 columns (if it has any)\ncheck that the first column has integers (to serve as node numbers)\nremove rows with no node numbers\nwarning if some node numbers in the data are not in the network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#PhyloPlots.getEdgeNodeCoordinates-Tuple{HybridNetwork, Bool, Bool}","page":"internals","title":"PhyloPlots.getEdgeNodeCoordinates","text":"getEdgeNodeCoordinates(net, useEdgeLength)\n\nCalculate coordinates for plotting later with Gadfly or RCall.\n\nActually modifies some (minor) attributes of the network, as it calls directEdges!, preorder! and cladewiseorder!.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#PhyloPlots.prepareEdgeDataFrame-Tuple{HybridNetwork, DataFrames.DataFrame, Bool, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}","page":"internals","title":"PhyloPlots.prepareEdgeDataFrame","text":"prepareEdgeDataFrame(net, edgeLabel::DataFrame, mainTree::Bool,\n    edge_xB, edge_xE, edge_yB, edge_yE,\n    minoredge_xB, minoredge_xE, minoredge_yB, minoredge_yE)\n\nCheck data frame for edge annotation. edge_*: Float64 vectors giving the coordinates for the beginning and end of edges. Return data frame with columns\n\nx, y: coordinates on the plots\nlen: node name\ngam: gamma (inheritance value)\nnum: node number\nlab: node label\nhyb: is hybrid?\nmin: is minor?\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#PhyloPlots.prepareNodeDataFrame-Tuple{HybridNetwork, DataFrames.DataFrame, Bool, Bool, Bool, Vector{Float64}, Vector{Float64}}","page":"internals","title":"PhyloPlots.prepareNodeDataFrame","text":"prepareNodeDataFrame(net, nodeLabel::DataFrame,\n    showNodeNumber::Bool, showIntNodeLabel::Bool, labelnodes::Bool,\n    node_x, node_y)\n\nMake data frame for node annotation. node_* should be Float64 vectors. nodeLabel should have columns as required by checkNodeDataFrame\n\nColumns of output data frame:\n\nx, y: coordinates on the plots (from node_*)\nname: node name\nnum: node number\nlab: node label\nlea: is leaf?\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#PhyloPlots.rexport-Tuple{HybridNetwork}","page":"internals","title":"PhyloPlots.rexport","text":"rexport(net::HybridNetwork; mainTree=false, useEdgeLength=true)\n\nCreate an RObject of class phylo (and evonet depending on the number of hybridizations) recognized by the ape library in R (S3 object). This RObject can be evaluated using the tools available in the ape library in R. For example, we can visualize the network using ape's plot function.\n\nnot exported: sexp is the best way to go.\n\nArguments\n\nuseEdgeLength: if true, export edge lengths from net.\nmainTree: if true, minor hybrid edges are omitted.\n\nExamples\n\njulia> net = readTopology(\"(((A,(B)#H1:::0.9),(C,#H1:::0.1)),D);\");\njulia> phy = rexport(net)\nRCall.RObject{RCall.VecSxp}\n$Nnode\n[1] 5\n\n$edge\n     [,1] [,2]\n[1,]    5    6\n[2,]    5    4\n[3,]    6    8\n[4,]    6    7\n[5,]    7    3\n[6,]    8    1\n[7,]    8    9\n[8,]    9    2\n\n$tip.label\n[1] \"A\" \"B\" \"C\" \"D\"\n\n$reticulation\n     [,1] [,2]\n[1,]    7    9\n\n$reticulation.gamma\n[1] 0.1\n\nattr(,\"class\")\n[1] \"evonet\" \"phylo\"\n\njulia> using RCall\n\njulia> R\"library(ape)\";\n\njulia> phy\nRCall.RObject{RCall.VecSxp}\n\n    Evolutionary network with 1 reticulation\n\n               --- Base tree ---\nPhylogenetic tree with 4 tips and 5 internal nodes.\n\nTip labels:\n[1] \"A\" \"B\" \"C\" \"D\"\n\nRooted; no branch lengths.\n\nR> phy\n\nEvolutionary network with 1 reticulation\n\n               --- Base tree ---\nPhylogenetic tree with 4 tips and 5 internal nodes.\n\nTip labels:\n[1] \"A\" \"B\" \"C\" \"D\"\n\nRooted; no branch lengths.\n\nR> str(phy)\nList of 5\n$ Nnode             : int 5\n$ edge              : int [1:8, 1:2] 5 5 6 6 7 8 8 9 6 4 ...\n$ tip.label         : chr [1:4] \"A\" \"B\" \"C\" \"D\"\n$ reticulation      : int [1, 1:2] 7 9\n$ reticulation.gamma: num 0.1\n- attr(*, \"class\")= chr [1:2] \"evonet\" \"phylo\"\n\n\n\n","category":"method"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"using PhyloNetworks, PhyloPlots, RCall, DataFrames\nmkpath(\"../assets/figures\")\nfigname(x) = joinpath(\"..\", \"assets\", \"figures\", x)","category":"page"},{"location":"man/adding_data/#Adding-data","page":"adding data","title":"Adding data","text":"","category":"section"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"In this section, we will look over ways of adding extra information or data to a plot.","category":"page"},{"location":"man/adding_data/#Adding-labels","page":"adding data","title":"Adding labels","text":"","category":"section"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"note: Note\nFor demonstration purposes, I will walk through the process of adding labels to edges, with notes on how to do the same for nodes in parentheses.","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"To add labels on edges (or nodes), we need to know their numbers. We can use the showEdgeNumbers = true option for this. (Use showNodeNumbers = true to see node numbers).","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"R\"svg\"(figname(\"adding_data1.svg\"), width=3, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(A,((B,#H1),((C)#H1, D)));\") # hide\nplot(net, :R, showEdgeNumber=true);\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"(Image: example1)","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"We will need to define a DataFrame with two columns of information: the number of the edge (or node), and the label that goes on it, like this:","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"Number Label\n1 \"My first edge\"\n2 \"My second edge\"","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"After including the DataFrames package, we can define it as so:","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"using DataFrames\nDataFrame(Number=[1, 2], Label=[\"My first edge\", \"My second edge\"])","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"Using this dataframe as input to the edgeLabel (nodeLabel for nodes) option puts the text on the correct edges:","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"R\"svg\"(figname(\"edge_labels_example.svg\"), width=4, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(A,((B,#H1),(C,(D)#H1)));\") # hide\nplot(net, :R, edgeLabel=DataFrame(Number=[1, 2], Label=[\"My first edge\", \"My second edge\"]));\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"(Image: example2)","category":"page"},{"location":"man/adding_data/#Adding-other-data-using-R","page":"adding data","title":"Adding other data using R","text":"","category":"section"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"We can use the return values of plot to get some information on the coordinates of  different elements of the plot. Using this, we can add any other information we want.","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"The plot function returns the following tuple:","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"(xmin, xmax, ymin, ymax, node_x, node_y, node_yB, node_yE,\nedge_xB, edge_xE, edge_yB, edge_yE, ndf, edf)","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"See the documentation for descriptions on every element: plot","category":"page"},{"location":"man/adding_data/#Side-clade-bars-example","page":"adding data","title":"Side clade bars example","text":"","category":"section"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"Here's some example code that adds bars to denote clades in the margin:","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"R\"svg\"(figname(\"side_bars.svg\"), width=4, height=4) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(((((((1,2),3),4),5),(6,7)),(8,9)),10);\");\nplot(net, :R, xlim=(1, 10))\nR\"segments\"([9, 9, 9], [0.8, 7.8, 9.8], [9, 9, 9], [7.2, 9.2, 10.2])\nR\"text\"([9.5, 9.5, 9.5], [4, 8.5, 10], [\"C\", \"B\", \"A\"])\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"(Image: example3)","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"Let's break this down step by step. First, we read the topology, and plot the graph normally. plot actually returns a value, from which we can get useful information. Below, we store the plot output in res, then check its first two values because they contain the default range of the x axis; xmin and xmax.","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"res = plot(net, :R);\nres[1:2]","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"Looking at xmin and xmax returned by default, we can see that the x range is about (0.3, 9). To give us extra space to work with, we can set xlim to (1,10), forcing the range to be wider.","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"plot(net, :R, xlim=(1, 10));","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"Knowing the coordinates, we can now add more information to the plot through RCall. For this, I use the segments and text functions to add side bars with text on them.","category":"page"},{"location":"man/adding_data/","page":"adding data","title":"adding data","text":"R\"segments\"([9, 9, 9], [0.8, 7.8, 9.8], [9, 9, 9], [7.2, 9.2, 10.2])\nR\"text\"([9.5, 9.5, 9.5], [4, 8.5, 10], [\"C\", \"B\", \"A\"])","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"using PhyloNetworks, PhyloPlots, RCall, DataFrames\nmkpath(\"../assets/figures\")\nfigname(x) = joinpath(\"..\", \"assets\", \"figures\", x)","category":"page"},{"location":"man/getting_started/#Getting-started","page":"getting started","title":"Getting started","text":"","category":"section"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"To demonstrate, we will plot the simple network: (A,((B,#H1),(C,(D)#H1)));","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"To start plotting, use the packages:","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"using PhyloNetworks\nusing PhyloPlots","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"Then read the topology","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"net = readTopology(\"(A,((B,#H1),(C,(D)#H1)));\")","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"and call plot, using :R for full funtionality:","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"note: About the two versions of plot()\nOne is made using Gadfly (plot(net)), the other using RCall (plot(net, :R)). Since only the RCall version supports the option style=:fulltree for the same style used by icytree, we will only use RCall.","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"For the function's full documentation, see here: plot","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"This will draw the following plot.","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"R\"svg\"(figname(\"gettingstarted.svg\"), width=3, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(A,((B,#H1),(C,(D)#H1)));\") # hide\nplot(net, :R);\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/getting_started/","page":"getting started","title":"getting started","text":"(Image: example1)","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"using PhyloNetworks, PhyloPlots, RCall, DataFrames\nmkpath(\"../assets/figures\")\nfigname(x) = joinpath(\"..\", \"assets\", \"figures\", x)","category":"page"},{"location":"man/better_edges/#Better-edges","page":"better edges","title":"Better edges","text":"","category":"section"},{"location":"man/better_edges/#Different-hybrid-edge-styles","page":"better edges","title":"Different hybrid edge styles","text":"","category":"section"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"We can use the style option to visualize minor hybrid edges as simple lines, unlike the icytree style visualization. style is by default :fulltree, but by switching it to :majortree, we can draw minor hybrid edges as diagonal lines.","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"R\"svg\"(figname(\"style_example.svg\"), width=3, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(A,((B,#H1),(C,(D)#H1)));\") # hide\nplot(net, :R, style=:majortree);\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"(Image: example1)","category":"page"},{"location":"man/better_edges/#Using-edge-lengths","page":"better edges","title":"Using edge lengths","text":"","category":"section"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"We can use useEdgeLength=true to draw a plot that uses the network's edge lengths to determine the lengths of the lines. For this, we'll use a network that has branch lengths:","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"R\"svg\"(figname(\"edge_len_example.svg\"), width=6, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nR\"layout\"([1 2]) # hide\nnet = readTopology(\"(A:3.3,((B:1.5,#H1:0.5):1.5,((C:1)#H1:1.8,D:1.1):.2):0.3);\")\ndf = DataFrame(Number=[-3, 3], Label=[\"N\", \"H1\"]); # hide\nplot(net, :R, useEdgeLength=true, ylim = [-1, 5.5], nodeLabel = df); # hide\nR\"text\"([3], [0], [\"useEdgeLength=true\"]) # hide\nplot(net, :R, useEdgeLength=false, ylim = [-1, 5.5], nodeLabel = df); # hide\nR\"text\"([3], [0], [\"useEdgeLength=false\"]) # hide\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"(Image: example2)","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"note: Note\nI used a DataFrame to add labels to the plot. For more on this, see the Adding labels section.","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"If branch lengths represent time, D could represent a fossil, or a virus strain sequenced a year before the others. Seeing this visually is the advantage of useEdgeLengths=true","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"This network happens to be time consistent, because the distance along the time (x) axis from node N to the hybrid node H1 is the same both ways.","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"note: Time consistency\nA network is time-consistent if all the paths between 2 given nodes all have the same length. Time inconsistency can occur when branch lengths are not measured in calendar time, such as if branch lengths are in substitutions per site (some paths might evolve with more substitutions than others), or in number of generations (some lineages might have 1 generation per year, others more or fewer generations per year), or in coalescent units (number of generations / effective population size).A time-consistent network may be ultrametric (the distance between the root and the tips is the same across all tips), or not like the network above.","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"Time inconsistent networks like these ones below might cause confusion:","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"R\"svg\"(figname(\"edge_len_example2.svg\"), width=6, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nR\"layout\"([1 2]) # hide\nnet1 = readTopology(\"(A:3.3,((B:1.5,#H1:1.2):1.5,((C:1.8)#H1:1,D:1.1):.2):0.3);\");\nnet2 = readTopology(\"(A:3.3,((B:1.5,#H1:0.2):1.5,((C:1)#H1:1.8,D:1.1):.2):0.3);\");\nplot(net1, :R, useEdgeLength=true); # hide\nplot(net2, :R, useEdgeLength=true); # hide\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"(Image: example3)","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"It may be useful to consider using style=:majortree if it causes too much confusion, since the :majortree style doesn't visually represent minor edge lengths. Because of this, I used the showEdgeLength=true option to see the information anyway.","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"R\"svg\"(figname(\"edge_len_example3.svg\"), width=6, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nR\"layout\"([1 2])\nplot(net1, :R, useEdgeLength=true, style = :majortree, showEdgeLength=true, arrowlen=0.1);\nplot(net2, :R, useEdgeLength=true, style = :majortree, showEdgeLength=true, arrowlen=0.1);\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"(Image: example4)","category":"page"},{"location":"man/better_edges/","page":"better edges","title":"better edges","text":"I also used the arrowlen=0.1 option to show the arrow tips to show the direction of minor edges, which are hidden by default when using the style=:majortree option.","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"using PhyloNetworks, PhyloPlots, RCall, DataFrames\nmkpath(\"../assets/figures\")\nfigname(x) = joinpath(\"..\", \"assets\", \"figures\", x)","category":"page"},{"location":"man/untangling_edges/#Untangling-the-network","page":"untangling edges","title":"Untangling the network","text":"","category":"section"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"This plot may not be the easiest to read, as the hybrid edge crosses over C's edge:","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"(Image: example1)","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"To fix this, we can to rotate C and D's edges around their parent node.","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"First we need to know the number of this parent node. By showing node numbers with the showNodeNumbers = true option, we can find the number of the node whose child edges we should rotate.","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"R\"svg\"(figname(\"untangling1.svg\"), width=3, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(A,((B,#H1),(C,(D)#H1)));\") # hide\nplot(net, :R, showNodeNumber=true);\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"(Image: example2)","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"As we can see, rotating edges around node -5 will make for a prettier network.","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"R\"svg\"(figname(\"untangling2.svg\"), width=3, height=3) # hide\nR\"par\"(mar=[.1,.1,.1,.1]) # hide\nnet = readTopology(\"(A,((B,#H1),(C,(D)#H1)));\") # hide\nrotate!(net, -5)\nplot(net, :R)\nR\"dev.off()\" # hide\nnothing # hide","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"(Image: example3)","category":"page"},{"location":"man/untangling_edges/","page":"untangling edges","title":"untangling edges","text":"This may seem unnecesary for a small network as shown, but it is a useful tool for plotting large networks.","category":"page"},{"location":"lib/public/#public-documentation","page":"public","title":"public documentation","text":"","category":"section"},{"location":"lib/public/","page":"public","title":"public","text":"Documentation for PhyloPlots's public (exported) functions.","category":"page"},{"location":"lib/public/#index","page":"public","title":"index","text":"","category":"section"},{"location":"lib/public/","page":"public","title":"public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#functions","page":"public","title":"functions","text":"","category":"section"},{"location":"lib/public/","page":"public","title":"public","text":"Modules = [PhyloPlots]\nPrivate = false\nOrder   = [:function]","category":"page"},{"location":"lib/public/#Gadfly.plot-Tuple{HybridNetwork, Symbol}","page":"public","title":"Gadfly.plot","text":"plot(net::HybridNetwork, method::Symbol)\n\nPlot a network using R graphics. method should be :R (actually, any symbol would do, for now!).\n\noptional arguments, shared with the Gadfly-based plot function:\n\nuseEdgeLength = false : if true, the tree edges and major hybrid edges are drawn proportionally to their length. Minor hybrid edges are not, however. Note that edge lengths in coalescent units may scale very poorly with time.\nshowTipLabel = true : if true, taxon labels are shown. You may need to zoom out to see them.\nshowNodeNumber = false : if true, nodes are labelled with the number used internally.\nshowEdgeLength = false : if true, edges are labelled with their length (above)\nshowGamma = false : if true, hybrid edges are labelled with their heritability (below)\nedgeColor = \"black\" : color for tree edges.\nmajorHybridEdgeColor = \"deepskyblue4\" : color for major hybrid edges\nminorHybridEdgeColor = \"deepskyblue\" : color for minor hybrid edges\nshowEdgeNumber = false : if true, edges are labelled with the number used internally.\nshowIntNodeLabel = false : if true, internal nodes are labelled with their names. Useful for hybrid nodes, which do have tags like 'H1'.\nedgeLabel = DataFrame() : dataframe with two columns: the first with edge numbers, the second with labels (like bootstrap values) to annotate edges. empty by default.\nnodeLabel = DataFrame() : dataframe with two columns: the first with node numbers, the second with labels (like bootstrap values for hybrid relationships) to annotate nodes. empty by default.\nstyle = :fulltree : symbol indicating the style of the diagram\n:majortree will simply draw minor edges onto the major tree.\n:fulltree will draw minor edges as their own branches in the tree (like in icytree.org), useful for overlapping or confusing networks.\narrowlen : the length of the arrow tips in the full tree style. if style = :fulltree, then arrowlen = 0.2. otherwise, arrowlen = 0, which makes the arrows appear as segments.\n\noptional arguments specific to this function:\n\nxlim, ylim : array of 2 values\ntipOffset = 0.0 : to offset tip labels\n\nplot() returns the following tuple: (xmin, xmax, ymin, ymax, node_x, node_y, node_yB, node_yE, edge_xB, edge_xE, edge_yB, edge_yE, ndf, edf)\n\nxmin : the minimum x value of the plot\nxmax : the maximum x value of the plot\nymin : the minimum y value of the plot\nymax : the maximum y value of the plot\nnode_x : the x values of the nodes in net.node in their respective order\nnode_y : the y values of the nodes\nnode_yB : the y value of the beginning of the verticle bar\nnode_yE : the y value of the end of the verticle bar\nnode_yE : the y value of the end of the verticle bar\nedge_xB : the x value of the beginning of the edges in net.edge in their respective order\nedge_xE : the x value of the end of the edges\nedge_yB : the y value of the beginning of the edges\nedge_yE : the y value of the end of the edges\nndf : the node data frame: see section Adding labels for more\nedf : the edge data frame\n\nNote that plot actually modifies some (minor) attributes of the network, as it calls directEdges! and preorder!.\n\nIf hybrid edges cross tree and major edges, you may choose to rotate some tree edges to eliminate crossing edges, using rotate! (in PhyloNetworks).\n\nAlternative: a tree or network can be exported with sexp and then displayed with R's \"plot\" and all its options.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Gadfly.plot-Tuple{HybridNetwork}","page":"public","title":"Gadfly.plot","text":"plot(net::HybridNetwork; useEdgeLength=false, mainTree=false, showTipLabel=true,\n     showNodeNumber=false, showEdgeLength=false, showGamma=false, edgeColor=colorant\"black\",\n     majorHybridEdgeColor=colorant\"deepskyblue4\", minorHybridEdgeColor=colorant\"deepskyblue\",\n     showEdgeNumber=false, showIntNodeLabel=false, edgeLabel=[], nodeLabel=[])\n\nPlots a network, from left to right.\n\nuseEdgeLength: if true, the tree edges and major hybrid edges are drawn proportionally to their length. Minor hybrid edges are not, however. Note that edge lengths in coalescent units may scale very poorly with time.\nmainTree: if true, the minor hybrid edges are ommitted.\nshowTipLabel: if true, taxon labels are shown. You may need to zoom out to see them.\nshowNodeNumber: if true, nodes are labelled with the number used internally.\nshowEdgeLength: if true, edges are labelled with their length (above)\nshowGamma: if true, hybrid edges are labelled with their heritability (below)\nedgeColor: color for tree edges. black by default.\nmajorHybridEdgeColor: color for major hybrid edges\nminorHybridEdgeColor: color for minor hybrid edges\nshowEdgeNumber: if true, edges are labelled with the number used internally.\nshowIntNodeLabel: if true, internal nodes are labelled with their names. Useful for hybrid nodes, which do have tags like 'H1'.\nedgeLabel: dataframe with two columns: the first with edge numbers, the second with labels (like bootstrap values) to annotate edges. empty by default.\nnodeLabel: dataframe with two columns: the first with node numbers, the second with labels (like bootstrap values for hybrid relationships) to annotate nodes. empty by default.\n\nNote that plot actually modifies some (minor) attributes of the network, as it calls directEdges!, preorder! and cladewiseorder!.\n\nIf hybrid edges cross tree and major edges, you may choose to rotate some tree edges to eliminate crossing edges, using rotate!.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Gadfly.plot-Tuple{TwoBinaryTraitSubstitutionModel}","page":"public","title":"Gadfly.plot","text":"plot(model::TwoBinaryTraitSubstitutionModel)\n\nDisplay substitution rates for a trait evolution model for two possibly dependent binary traits; using R via RCall. Adapted from fitPagel functions found in the R package phytools.\n\nExamples\n\njulia> using PhyloNetworks\n\njulia> m = TwoBinaryTraitSubstitutionModel([2.0,1.2,1.1,2.2,1.0,3.1,2.0,1.1],\n                [\"carnivory\", \"noncarnivory\", \"wet\", \"dry\"])\nSubstitution model for 2 binary traits, with rate matrix:\n                     carnivory-wet    carnivory-dry noncarnivory-wet noncarnivory-dry\n    carnivory-wet                *           1.0000           2.0000           0.0000\n    carnivory-dry           3.1000                *           0.0000           1.1000\n noncarnivory-wet           1.2000           0.0000                *           2.0000\n noncarnivory-dry           0.0000           2.2000           1.1000                *\n\njulia> plot(m);\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RCall.sexp-Tuple{HybridNetwork}","page":"public","title":"RCall.sexp","text":"function sexp(net::HybridNetwork)\n\nExport a HybridNework object to the R language as either phylo or evonet object (depending on degree of hybridization) recognized by the R package ape. Used by the $object syntax and by @rput to use a Julia object in R: see the examples below. Makes it easy to plot a Julia tree or network using plotting facilities in R.\n\ncode inspired from Phylo.jl\n\nExamples\n\njulia> using RCall\njulia> using PhyloNetworks\njulia> net = readTopology(\"(((A:.2,(B:.1)#H1:.1::0.9):.1,(C:.11,#H1:.01::0.1):.19):.1,D:.4);\");\nR> library(ape); # type $ to switch from julia to R\nR> $net\n\nEvolutionary network with 1 reticulation\n\n               --- Base tree ---\nPhylogenetic tree with 4 tips and 5 internal nodes.\n\nTip labels:\n[1] \"A\" \"B\" \"C\" \"D\"\n\nRooted; includes branch lengths.\njulia> @rput net # press the delete key to switch from R back to julia\nR> net\n\nEvolutionary network with 1 reticulation\n\n--- Base tree ---\nPhylogenetic tree with 4 tips and 5 internal nodes.\n\nTip labels:\n[1] \"A\" \"B\" \"C\" \"D\"\n\nRooted; includes branch lengths.\n\nR> str(net)\nList of 7\n $ edge               : int [1:8, 1:2] 5 5 6 6 7 8 8 9 6 4 ...\n $ reticulation.length: num 0.01\n $ Nnode              : int 5\n $ edge.length        : num [1:8] 0.1 0.4 0.1 0.19 0.11 0.2 0.1 0.1\n $ reticulation       : int [1, 1:2] 7 9\n $ reticulation.gamma : num 0.1\n $ tip.label          : chr [1:4] \"A\" \"B\" \"C\" \"D\"\n - attr(*, \"class\")= chr [1:2] \"evonet\" \"phylo\"\nNULL\n\nR> plot(net)\n\n\n\n","category":"method"},{"location":"#PhyloPlots.jl","page":"home","title":"PhyloPlots.jl","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"PhyloPlots is a Julia package to plot phylogenetic trees and networks.","category":"page"},{"location":"","page":"home","title":"home","text":"PhyloNetworks objects can be displayed via Gadfly, and through R via RCall.","category":"page"},{"location":"#manual-outline","page":"home","title":"manual outline","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"Pages = [\n    \"man/installation.md\",\n    \"man/getting_started.md\",\n    \"man/untangling_edges.md\",\n    \"man/better_edges.md\",\n    \"man/adding_data.md\"\n]\nDepth = 3","category":"page"},{"location":"#library-outline","page":"home","title":"library outline","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]\nDepth = 1","category":"page"},{"location":"#functions","page":"home","title":"functions","text":"","category":"section"},{"location":"","page":"home","title":"home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]\nOrder = [:function]","category":"page"},{"location":"man/installation/#Installation","page":"installation","title":"Installation","text":"","category":"section"},{"location":"man/installation/","page":"installation","title":"installation","text":"This will assume you have installed Julia and PhyloNetworks. For information on how to install them, see here","category":"page"},{"location":"man/installation/","page":"installation","title":"installation","text":"PhyloPlots depends on PhyloNetworks, and has further dependencies like Gadfly and RCall","category":"page"},{"location":"man/installation/","page":"installation","title":"installation","text":"To install in the Julia REPL, enter package mode with ], and:","category":"page"},{"location":"man/installation/","page":"installation","title":"installation","text":"add PhyloPlots","category":"page"},{"location":"man/installation/","page":"installation","title":"installation","text":"Or in julian mode:","category":"page"},{"location":"man/installation/","page":"installation","title":"installation","text":"using Pkg\nPkg.add(\"PhyloPlots\")","category":"page"}]
}
